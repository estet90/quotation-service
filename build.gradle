plugins {
    id "java"
    id "application"
    id "org.openapi.generator" version "4.2.3"
}

group "ru.kononov"
version "1.0.0"

sourceCompatibility = 15

repositories {
    mavenCentral()
    gradlePluginPortal()
}

ext {
    daggerVersion = "2.30"
    lombokVersion = "1.18.12"
    hibernameValidatorVersion = "6.1.2.Final"
}

dependencies {
    compile platform("org.apache.logging.log4j:log4j-bom:2.13.1")
    compile(
            "org.apache.logging.log4j:log4j-api",
            "org.apache.logging.log4j:log4j-core",
            "org.slf4j:slf4j-nop:1.7.30",

            "com.google.dagger:dagger:$daggerVersion",

            "commons-io:commons-io:2.6",
            "commons-cli:commons-cli:1.4",

            "com.h2database:h2:1.4.200",
            "com.zaxxer:HikariCP:3.4.5",

            "io.swagger:swagger-annotations:1.5.24",
            "org.openapitools:jackson-databind-nullable:0.2.0",
            "javax.validation:validation-api:2.0.1.Final",
            "javax.annotation:javax.annotation-api:1.3.2",
            "com.fasterxml.jackson.core:jackson-core:2.10.3",
            "org.hibernate.validator:hibernate-validator:$hibernameValidatorVersion",
            "org.glassfish:javax.el:3.0.0",
            "javax.el:javax.el-api:3.0.0"
    )
    compileOnly("org.projectlombok:lombok:$lombokVersion")
    testCompile(
            "org.junit.jupiter:junit-jupiter:5.6.0",
            "org.assertj:assertj-core:3.15.0",
            "org.mockito:mockito-core:3.3.0",

            "com.google.dagger:dagger-compiler:$daggerVersion",
            "org.projectlombok:lombok:$lombokVersion"
    )
    annotationProcessor(
            "com.google.dagger:dagger-compiler:$daggerVersion",
            "org.projectlombok:lombok:$lombokVersion",
            "org.hibernate.validator:hibernate-validator-annotation-processor:$hibernameValidatorVersion"
    )
    testAnnotationProcessor(
            "com.google.dagger:dagger-compiler:$daggerVersion"
    )
}

def generatedFilesPath = "$projectDir/build/generated/sources"
def generatedOpenapiFilesPath = "$generatedFilesPath/openapi"

task generateRestApiWrap() {
    def openapiInputSpec = "$projectDir/src/main/resources/openapi/self/quotation-service.yaml"
    inputs.file("$openapiInputSpec")
    outputs.dir("$generatedOpenapiFilesPath")
    doLast {
        task generateRestApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
            generatorName = "spring"
            inputSpec = "$openapiInputSpec"
            outputDir = "$generatedOpenapiFilesPath"
            modelPackage = "ru.kononov.quotationservice.model"
            generateModelTests = false
            configOptions = [
                    dateLibrary  : "java8",
                    interfaceOnly: "true",
            ]
            systemProperties = [
                    models: "" //в данном случае генерируются только DTO
            ]
        }
        generateRestApi.doWork()
    }
}

sourceSets.main.java {
    srcDirs("$generatedOpenapiFilesPath/src/main/java", "$generatedFilesPath/annotationProcessor/java/main")
}

compileJava() {
    dependsOn generateRestApiWrap
    options.compilerArgs += ["--enable-preview"]
}

jar {
    mainClassName = "ru.kononov.quotationservice.Application"
    manifest {
        attributes("Main-Class": mainClassName)
    }
}

compileTestJava {
    options.compilerArgs += ["--enable-preview"]
}

test {
    useJUnitPlatform {
        excludeEngines "junit-vintage"
    }
    dependsOn "cleanTest"
    jvmArgs "--enable-preview"
    testLogging {
        events "passed", "skipped", "failed"
    }
}
